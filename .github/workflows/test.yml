name: Terragrunt CI Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev,main ]

env:
  TERRAFORM_VERSION: '1.8.4'
  TERRAGRUNT_VERSION: '0.58.5'

jobs:
  validation:
    name: Validate Terragrunt Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/dev' || github.base_ref == 'dev'

    steps:
    - name: Debug GitHub Context
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Base Ref: ${{ github.base_ref }}"
        echo "Head Ref: ${{ github.head_ref }}"
        echo "github.event.pull_request.base.sha: ${{ github.event.pull_request.base.sha }}"
        echo "Ref Name: ${{ github.ref_name }}"
        echo "Ref Type: ${{ github.ref_type }}"
        echo "SHA: ${{ github.sha }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Action: ${{ github.action }}"
        echo "Actor: ${{ github.actor }}"

    - name: Check PR code
      uses: actions/checkout@v4.1.1
      with:
        ref:  ${{ github.base_ref }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Terragrunt
      run: |
        curl -fsSL https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64 -o terragrunt
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Setup TFSec
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Check versions
      run:  |
        echo "Terraform version:"
        terraform version
        echo "Terragrunt version:"
        terragrunt --version

    - name: Find changed Terragrunt directories
      id: changed-dirs
      run: |
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        CHANGED_DIRS=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | \
          xargs -I {} dirname {} | \
          sort -u | \
          while read dir; do
            if [[ -f "$dir/terragrunt.hcl" ]]; then
              echo "$dir"
            fi
          done | sort -u)
        
        echo "变更的Terragrunt目录:"
        echo "$CHANGED_DIRS"
        
        echo "changed_dirs<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_DIRS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Validate formatting for changed projects
      run: |
        if [ -z "${{ steps.changed-dirs.outputs.changed_dirs }}" ]; then
          echo "没有 Terragrunt 项目变更，跳过格式检查"
          exit 0
        fi
        
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Validate formatting for changed projects"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt hclfmt --terragrunt-check"
            cd $project
            terragrunt hclfmt --terragrunt-check
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Initialize Terragrunt
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Initialize Terragrunt"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt run-all init"
            cd $project
            terragrunt run-all init
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Validate input variables
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Validate input variables"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt validate-inputs"
            cd $project
            terragrunt validate-inputs
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Validate configuration
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Validate configuration"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt run-all validate"
            cd $project
            terragrunt run-all validate
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Run tfsec security scan
      id: tfsec
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Run tfsec security scan"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt run-all bash -c 'tfsec . --force-all-dirs --format json > tfsec-report.json 2>/dev/null || true'"
            cd $project
            terragrunt run-all bash -c "tfsec . --force-all-dirs --format json > tfsec-report.json 2>/dev/null || true"
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Run OPA compliance checks
      id: opa
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Run OPA compliance checks"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt run-all bash -c terragrunt run-all bash -c 'conftest test terragrunt.hcl --policy ../policies/ --output json > opa-report.json || true'"
            cd $project
            terragrunt run-all bash -c "conftest test terragrunt.hcl --policy ../policies/ --output json > opa-report.json || true"
            cd ..
          else
            echo "目录无效: $project"
          fi
        done

    - name: Analyze security results and fail on critical issues
      run: |
        echo "====安全扫描结果分析===="
        
        CRITICAL_ISSUES=$(find . -name "tfsec-report.json" -exec jq -r '.results[] | select(.severity == "CRITICAL" or .severity == "HIGH") | "模块: \(.location.filename) | 风险: \(.severity) | 规则: \(.rule_description)"' {} + | head -10)
        if [ -n "$CRITICAL_ISSUES" ]; then
          echo "发现高风险安全问题:"
          echo "$CRITICAL_ISSUES"
          echo ""
          echo "受影响的模块路径:"
          find . -name "tfsec-report.json" -exec jq -r '.results[] | select(.severity == "CRITICAL" or .severity == "HIGH") | .location.filename' {} + | sort -u | sed 's|/terragrunt.hcl||' | sort -u
          exit 1
        else
          echo "✅ 未发现 High/Critical 级别安全风险"
        fi
        
        OPA_VIOLATIONS=$(find . -name "opa-report.json" -exec jq -r '.failures[]? | "模块: \(.location.file) | 问题: \(.msg)"' {} +)
        if [ -n "$OPA_VIOLATIONS" ]; then
          echo "OPA 合规性检查失败:"
          echo "$OPA_VIOLATIONS"
          exit 1
        fi

    - name: Generate execution plan
      run: |
        for project in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
          echo "Generate execution plan"
          if [ -d "$project" ] && [ -f "$project/terragrunt.hcl" ]; then
            echo "执行: cd $project && terragrunt run-all plan -out=tfplan"
            cd $project
            terragrunt run-all plan -out=tfplan
            cd ..
          else
            echo "目录无效: $project"
          fi
        done
